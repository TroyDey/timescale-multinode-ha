scope: kraken-mare
name: tsdb-access-leader2

restapi:
  listen: tsdb-access-leader2:8008
  connect_address: tsdb-access-leader2:8008

zookeeper:
  hosts: ['zookeeper:2181']

bootstrap:
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 1048576
    synchronous_mode: true
    synchronous_mode_strict: true
    postgresql:
      use_pg_rewind: true
      parameters:
         wal_level: logical
         max_worker_processes: 23
         max_prepared_transactions: 150
         max_locks_per_transaction: 256
         synchronous_commit: "on"
         synchronous_standby_names: "*"

  # some desired options for 'initdb'
  initdb:  # Note: It needs to be a list (some options need values, others are switches)
  - encoding: UTF8
  - data-checksums

  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
  - host replication replicator all md5
  - host all all all trust

  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)
# post_init: /usr/local/bin/setup_cluster.sh

  # Some additional users users which needs to be created after initializing new cluster
  users:
    admin:
      password: admin
      options:
        - createrole
        - createdb

postgresql:
  listen: 0.0.0.0:5432
  connect_address: tsdb-access-leader2:5432
  data_dir: /var/lib/postgresql/data
#  bin_dir:
#  config_dir:
  pgpass: /tmp/pgpass0
  authentication:
    replication:
      username: replicator
      password: rep-pass
    superuser:
      username: postgres
      password: password
    rewind: 
      username: rewind_user
      password: rewind_password

  parameters:
    unix_socket_directories: '.'

  # Additional fencing script executed after acquiring the leader lock but before promoting the replica
  #pre_promote: /path/to/pre_promote.sh

tags:
    nofailover: false
    noloadbalance: false
    clonefrom: false
    nosync: false
